<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprEnemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* The following code has been written by Mark Cockburn */

//Initialise the variables at the begining of the game to prevent bugs
grid = mp_grid_create(x-420,y-420,420,420,8,8)
path = path_add()

//Create variables for the spawn location so that the object can return to it
startx = x
starty = y

//Set the correct depth for isometric
depth = -x-y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* The following code has been written by Mark Cockburn */

//Initialise the grid and path if the object is moving
//If the object is not moving then there is no point
if speed &gt; 0.1
{
    grid = mp_grid_create(x-420,y-420,420,420,8,8)
    path = path_add()
}

//Add the wall as an obsticle
//THIS NEEDS TO BE OPTIMISED
mp_grid_add_instances(path,objWall,1)

//Add enemies that are the same object as obsticles
if objEnemy.id != self.id and distance_to_object(objEnemy) &lt; 16
{
    mp_grid_add_instances(path,objEnemy.id,1)
}

//Move to player - else return to start position
if distance_to_object(objPlayer) &lt; 250
{
    //Plan a path towards the player if it is close enough
    mp_grid_path(grid,path,x,y,objPlayer.x,objPlayer.y,1)
    if path_get_length(path) &lt; 250
    {
        //Start the path towards the player if the path is short enough
        path_start(path,2,"",0)
    }
    else
    {
        //If the path is too long then return to the start point
        mp_grid_path(grid,path,x,y,startx,starty,1)
        path_start(path,2,"",0)
    }
}
else if distance_to_object(objPlayer) &gt; 250
{
    //If the player is too far then return to start position
    mp_grid_path(grid,path,x,y,startx,starty,1)
    path_start(path,2,"",0)
}

//Clear the grid at the end of the step
//This helps to optimise the game
mp_grid_clear_all(grid)

//Depth
if distance_to_object(objDepth) &lt; 6
{
    depth = +x+y
}
else
{
    depth = -x-y
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,24</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
